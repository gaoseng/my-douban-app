{"version":3,"file":"react-svg.production.min.js","sources":["../node_modules/@babel/runtime/helpers/extends.js","../node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","../node_modules/@babel/runtime/helpers/inheritsLoose.js","../node_modules/@tanem/svg-injector/esm/clone-svg.js","../node_modules/@tanem/svg-injector/esm/svg-cache.js","../node_modules/@tanem/svg-injector/esm/request-queue.js","../node_modules/@tanem/svg-injector/esm/load-svg.js","../node_modules/@tanem/svg-injector/esm/inject-element.js","../node_modules/@tanem/svg-injector/esm/unique-classes.js","../src/index.tsx","../node_modules/@tanem/svg-injector/esm/svg-injector.js"],"sourcesContent":["function _extends() {\n  module.exports = _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends;","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;","function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nmodule.exports = _inheritsLoose;","var cloneSvg = function cloneSvg(sourceSvg) {\n  return sourceSvg.cloneNode(true);\n};\n\nexport default cloneSvg;","var svgCache = {};\nexport default svgCache;","import cloneSvg from './clone-svg';\nimport svgCache from './svg-cache';\nvar requestQueue = [];\nexport var queueRequest = function queueRequest(url, callback) {\n  requestQueue[url] = requestQueue[url] || [];\n  requestQueue[url].push(callback);\n};\nexport var processRequestQueue = function processRequestQueue(url) {\n  for (var i = 0, len = requestQueue[url].length; i < len; i++) {\n    // Make these calls async so we avoid blocking the page/renderer\n    ;\n\n    (function (index) {\n      setTimeout(function () {\n        requestQueue[url][index](cloneSvg(svgCache[url]));\n      }, 0);\n    })(i);\n  }\n};","import cloneSvg from './clone-svg';\nimport { processRequestQueue, queueRequest } from './request-queue';\nimport svgCache from './svg-cache';\n\nvar loadSvg = function loadSvg(url, callback) {\n  var isLocal = window.location.protocol === 'file:';\n\n  if (svgCache[url] !== undefined) {\n    if (svgCache[url] instanceof SVGSVGElement) {\n      // We already have it in cache, so use it\n      callback(cloneSvg(svgCache[url]));\n    } else {\n      // We don't have it in cache yet, but we are loading it, so queue this request\n      queueRequest(url, callback);\n    }\n  } else {\n    if (!window.XMLHttpRequest) {\n      callback('Browser does not support XMLHttpRequest');\n      return false;\n    } // Seed the cache to indicate we are loading this URL already\n\n\n    svgCache[url] = {};\n    queueRequest(url, callback);\n    var httpRequest = new XMLHttpRequest();\n\n    httpRequest.onreadystatechange = function () {\n      // readyState 4 = complete\n      if (httpRequest.readyState === 4) {\n        // Handle status\n        if (httpRequest.status === 404 || httpRequest.responseXML === null) {\n          callback('Unable to load SVG file: ' + url);\n          if (isLocal) callback('Note: SVG injection ajax calls do not work locally without adjusting security setting in your browser. Or consider using a local webserver.');\n          callback();\n          return false;\n        } // 200 success from server, or 0 when using file:// protocol locally\n\n\n        if (httpRequest.status === 200 || isLocal && httpRequest.status === 0) {\n          if (httpRequest.responseXML instanceof Document) {\n            // Cache it\n            svgCache[url] = httpRequest.responseXML.documentElement;\n          } // IE9 doesn't create a responseXML Document object from loaded SVG,\n          // and throws a \"DOM Exception: HIERARCHY_REQUEST_ERR (3)\" error when injected.\n          //\n          // So, we'll just create our own manually via the DOMParser using\n          // the the raw XML responseText.\n          //\n          // :NOTE: IE8 and older doesn't have DOMParser, but they can't do SVG either, so...\n          else if (DOMParser && DOMParser instanceof Function) {\n              var xmlDoc;\n\n              try {\n                var parser = new DOMParser();\n                xmlDoc = parser.parseFromString(httpRequest.responseText, 'text/xml');\n              } catch (e) {\n                xmlDoc = undefined;\n              }\n\n              if (!xmlDoc || xmlDoc.getElementsByTagName('parsererror').length) {\n                callback('Unable to parse SVG file: ' + url);\n                return false;\n              } else {\n                // Cache it\n                svgCache[url] = xmlDoc.documentElement;\n              }\n            } // We've loaded a new asset, so process any requests waiting for it\n\n\n          processRequestQueue(url);\n        } else {\n          callback('There was a problem injecting the SVG: ' + httpRequest.status + ' ' + httpRequest.statusText);\n          return false;\n        }\n      }\n    };\n\n    httpRequest.open('GET', url); // Treat and parse the response as XML, even if the\n    // server sends us a different mimetype\n\n    if (httpRequest.overrideMimeType) httpRequest.overrideMimeType('text/xml');\n    httpRequest.send();\n  }\n};\n\nexport default loadSvg;","import loadSvg from './load-svg';\nimport uniqueClasses from './unique-classes';\nvar svgNamespace = 'http://www.w3.org/2000/svg';\nvar xlinkNamespace = 'http://www.w3.org/1999/xlink';\nvar injectedElements = [];\nvar ranScripts = {}; // Script running status\n\nvar injectCount = 0; // Inject a single element\n\nvar injectElement = function injectElement(el, evalScripts, pngFallback, renumerateIRIElements, callback) {\n  var hasSvgSupport = document.implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');\n  var imgUrl = el.getAttribute('data-src') || el.getAttribute('src'); // We can only inject SVG.\n\n  if (!/\\.svg/i.test(imgUrl)) {\n    callback('Attempted to inject a file with a non-svg extension: ' + imgUrl);\n    return;\n  } // If we don't have SVG support try to fall back to a png,\n  // either defined per-element via data-fallback or data-png,\n  // or globally via the pngFallback directory setting\n\n\n  if (!hasSvgSupport) {\n    var perElementFallback = el.getAttribute('data-fallback') || el.getAttribute('data-png'); // Per-element specific PNG fallback defined, so use that\n\n    if (perElementFallback) {\n      el.setAttribute('src', perElementFallback);\n      callback(null);\n    } else if (pngFallback) {\n      // Global PNG fallback directoriy defined, use the same-named PNG\n      el.setAttribute('src', pngFallback + '/' + imgUrl.split('/').pop().replace('.svg', '.png'));\n      callback(null);\n    } else {\n      // um...\n      callback('This browser does not support SVG and no PNG fallback was defined.');\n    }\n\n    return;\n  } // Make sure we aren't already in the process of injecting this element to\n  // avoid a race condition if multiple injections for the same element are run.\n  // :NOTE: Using indexOf() only _after_ we check for SVG support and bail,\n  // so no need for IE8 indexOf() polyfill\n\n\n  if (injectedElements.indexOf(el) !== -1) {\n    return;\n  } // Remember the request to inject this element, in case other injection\n  // calls are also trying to replace this element before we finish\n\n\n  injectedElements.push(el); // Try to avoid loading the orginal image src if possible.\n\n  el.setAttribute('src', ''); // Load it up\n\n  loadSvg(imgUrl, function (svg) {\n    if (typeof svg === 'undefined' || typeof svg === 'string') {\n      callback(svg);\n      return false;\n    }\n\n    var imgId = el.getAttribute('id');\n\n    if (imgId) {\n      svg.setAttribute('id', imgId);\n    }\n\n    var imgTitle = el.getAttribute('title');\n\n    if (imgTitle) {\n      svg.setAttribute('title', imgTitle);\n    } // Concat the SVG classes + 'injected-svg' + the img classes\n\n\n    var classMerge = [].concat(svg.getAttribute('class') || [], 'injected-svg', el.getAttribute('class') || []).join(' ');\n    svg.setAttribute('class', uniqueClasses(classMerge));\n    var imgStyle = el.getAttribute('style');\n\n    if (imgStyle) {\n      svg.setAttribute('style', imgStyle);\n    } // Copy all the data elements to the svg\n\n\n    var imgData = [].filter.call(el.attributes, function (at) {\n      return /^data-\\w[\\w-]*$/.test(at.name);\n    });\n    Array.prototype.forEach.call(imgData, function (dataAttr) {\n      if (dataAttr.name && dataAttr.value) {\n        svg.setAttribute(dataAttr.name, dataAttr.value);\n      }\n    });\n\n    if (renumerateIRIElements) {\n      // Make sure any internally referenced clipPath ids and their\n      // clip-path references are unique.\n      //\n      // This addresses the issue of having multiple instances of the\n      // same SVG on a page and only the first clipPath id is referenced.\n      //\n      // Browsers often shortcut the SVG Spec and don't use clipPaths\n      // contained in parent elements that are hidden, so if you hide the first\n      // SVG instance on the page, then all other instances lose their clipping.\n      // Reference: https://bugzilla.mozilla.org/show_bug.cgi?id=376027\n      // Handle all defs elements that have iri capable attributes as defined by w3c: http://www.w3.org/TR/SVG/linking.html#processingIRI\n      // Mapping IRI addressable elements to the properties that can reference them:\n      var iriElementsAndProperties = {\n        clipPath: ['clip-path'],\n        'color-profile': ['color-profile'],\n        cursor: ['cursor'],\n        filter: ['filter'],\n        linearGradient: ['fill', 'stroke'],\n        marker: ['marker', 'marker-start', 'marker-mid', 'marker-end'],\n        mask: ['mask'],\n        pattern: ['fill', 'stroke'],\n        radialGradient: ['fill', 'stroke']\n      };\n      var element, elementDefs, properties, currentId, newId;\n      Object.keys(iriElementsAndProperties).forEach(function (key) {\n        element = key;\n        properties = iriElementsAndProperties[key];\n        elementDefs = svg.querySelectorAll('defs ' + element + '[id]');\n\n        for (var i = 0, elementsLen = elementDefs.length; i < elementsLen; i++) {\n          currentId = elementDefs[i].id;\n          newId = currentId + '-' + injectCount; // All of the properties that can reference this element type\n\n          var referencingElements; // eslint-disable-next-line no-loop-func\n\n          Array.prototype.forEach.call(properties, function (property) {\n            // :NOTE: using a substring match attr selector here to deal with IE \"adding extra quotes in url() attrs\"\n            referencingElements = svg.querySelectorAll('[' + property + '*=\"' + currentId + '\"]');\n\n            for (var j = 0, referencingElementLen = referencingElements.length; j < referencingElementLen; j++) {\n              referencingElements[j].setAttribute(property, 'url(#' + newId + ')');\n            }\n          });\n          var allLinks = svg.querySelectorAll('[*|href]');\n          var links = [];\n\n          for (var k = 0, allLinksLen = allLinks.length; k < allLinksLen; k++) {\n            if (allLinks[k].getAttributeNS(xlinkNamespace, 'href').toString() === '#' + elementDefs[i].id) {\n              links.push(allLinks[k]);\n            }\n          }\n\n          for (var l = 0, linksLen = links.length; l < linksLen; l++) {\n            links[l].setAttributeNS(xlinkNamespace, 'href', '#' + newId);\n          }\n\n          elementDefs[i].id = newId;\n        }\n      });\n    } // Remove any unwanted/invalid namespaces that might have been added by SVG editing tools\n\n\n    svg.removeAttribute('xmlns:a'); // Post page load injected SVGs don't automatically have their script\n    // elements run, so we'll need to make that happen, if requested\n    // Find then prune the scripts\n\n    var scripts = svg.querySelectorAll('script');\n    var scriptsToEval = [];\n    var script, scriptType;\n\n    for (var k = 0, scriptsLen = scripts.length; k < scriptsLen; k++) {\n      scriptType = scripts[k].getAttribute('type'); // Only process javascript types.\n      // SVG defaults to 'application/ecmascript' for unset types\n\n      if (!scriptType || scriptType === 'application/ecmascript' || scriptType === 'application/javascript') {\n        // innerText for IE, textContent for other browsers\n        script = scripts[k].innerText || scripts[k].textContent; // Stash\n\n        scriptsToEval.push(script); // Tidy up and remove the script element since we don't need it anymore\n\n        svg.removeChild(scripts[k]);\n      }\n    } // Run/Eval the scripts if needed\n\n\n    if (scriptsToEval.length > 0 && (evalScripts === 'always' || evalScripts === 'once' && !ranScripts[imgUrl])) {\n      for (var l = 0, scriptsToEvalLen = scriptsToEval.length; l < scriptsToEvalLen; l++) {\n        // :NOTE: Yup, this is a form of eval, but it is being used to eval code\n        // the caller has explictely asked to be loaded, and the code is in a caller\n        // defined SVG file... not raw user input.\n        //\n        // Also, the code is evaluated in a closure and not in the global scope.\n        // If you need to put something in global scope, use 'window'\n        // eslint-disable-next-line no-new-func\n        new Function(scriptsToEval[l])(window);\n      } // Remember we already ran scripts for this svg\n\n\n      ranScripts[imgUrl] = true;\n    } // :WORKAROUND:\n    // IE doesn't evaluate <style> tags in SVGs that are dynamically added to the page.\n    // This trick will trigger IE to read and use any existing SVG <style> tags.\n    //\n    // Reference: https://github.com/iconic/SVGInjector/issues/23\n\n\n    var styleTags = svg.querySelectorAll('style');\n    Array.prototype.forEach.call(styleTags, function (styleTag) {\n      styleTag.textContent += '';\n    });\n    svg.setAttribute('xmlns', svgNamespace);\n    svg.setAttribute('xmlns:xlink', xlinkNamespace); // Replace the image with the svg\n\n    el.parentNode.replaceChild(svg, el); // Now that we no longer need it, drop references\n    // to the original element so it can be GC'd\n\n    delete injectedElements[injectedElements.indexOf(el)];\n    el = null; // Increment the injected count\n\n    injectCount++;\n    callback(svg);\n  });\n};\n\nexport default injectElement;","var uniqueClasses = function uniqueClasses(list) {\n  list = list.split(' ');\n  var hash = {};\n  var i = list.length;\n  var out = [];\n\n  while (i--) {\n    if (!hash.hasOwnProperty(list[i])) {\n      hash[list[i]] = 1;\n      out.unshift(list[i]);\n    }\n  }\n\n  return out.join(' ');\n};\n\nexport default uniqueClasses;","import SVGInjector from '@tanem/svg-injector'\nimport * as PropTypes from 'prop-types'\nimport * as React from 'react'\nimport ReactDOMServer from 'react-dom/server'\n\ninterface Props {\n  evalScripts?: 'always' | 'once' | 'never'\n  onInjected?: (svg: SVGSVGElement) => void\n  renumerateIRIElements?: boolean\n  src: string\n  svgClassName?: string\n  svgStyle?: React.CSSProperties\n}\n\nexport default class ReactSVG extends React.Component<\n  Props &\n    React.DetailedHTMLProps<\n      React.HTMLAttributes<HTMLDivElement>,\n      HTMLDivElement\n    >\n> {\n  static defaultProps = {\n    evalScripts: 'never',\n    onInjected: () => undefined,\n    renumerateIRIElements: true,\n    svgClassName: null,\n    svgStyle: {}\n  }\n\n  static propTypes = {\n    evalScripts: PropTypes.oneOf(['always', 'once', 'never']),\n    onInjected: PropTypes.func,\n    renumerateIRIElements: PropTypes.bool,\n    src: PropTypes.string.isRequired,\n    svgClassName: PropTypes.string,\n    svgStyle: PropTypes.object\n  }\n\n  container?: HTMLDivElement | null\n\n  refCallback: React.Ref<HTMLDivElement> = container => {\n    this.container = container\n  }\n\n  renderSVG() {\n    if (this.container instanceof Node) {\n      const {\n        evalScripts,\n        onInjected: each,\n        renumerateIRIElements,\n        src,\n        svgClassName,\n        svgStyle\n      } = this.props\n\n      const div = document.createElement('div')\n      div.innerHTML = ReactDOMServer.renderToStaticMarkup(\n        <div>\n          <div className={svgClassName} data-src={src} style={svgStyle} />\n        </div>\n      )\n\n      const wrapper = this.container.appendChild(\n        div.firstChild as HTMLDivElement\n      )\n\n      SVGInjector(wrapper.firstChild, {\n        each,\n        evalScripts,\n        renumerateIRIElements\n      })\n    }\n  }\n\n  removeSVG() {\n    if (\n      this.container instanceof Node &&\n      this.container.firstChild instanceof Node\n    ) {\n      this.container.removeChild(this.container.firstChild)\n    }\n  }\n\n  componentDidMount() {\n    this.renderSVG()\n  }\n\n  componentDidUpdate() {\n    this.removeSVG()\n    this.renderSVG()\n  }\n\n  componentWillUnmount() {\n    this.removeSVG()\n  }\n\n  render() {\n    const {\n      evalScripts,\n      onInjected,\n      renumerateIRIElements,\n      src,\n      svgClassName,\n      svgStyle,\n      ...rest\n    } = this.props\n\n    return <div {...rest} ref={this.refCallback} />\n  }\n}\n","import injectElement from './inject-element';\n/**\n * :NOTE: We are using get/setAttribute with SVG because the SVG DOM spec\n * differs from HTML DOM and can return other unexpected object types when\n * trying to directly access svg properties. ex: \"className\" returns a\n * SVGAnimatedString with the class value found in the \"baseVal\" property,\n * instead of simple string like with HTML Elements.\n */\n\nvar SVGInjector = function SVGInjector(elements, _temp, done) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$evalScripts = _ref.evalScripts,\n      evalScripts = _ref$evalScripts === void 0 ? 'always' : _ref$evalScripts,\n      _ref$pngFallback = _ref.pngFallback,\n      pngFallback = _ref$pngFallback === void 0 ? false : _ref$pngFallback,\n      eachCallback = _ref.each,\n      _ref$renumerateIRIEle = _ref.renumerateIRIElements,\n      renumerateIRIElements = _ref$renumerateIRIEle === void 0 ? true : _ref$renumerateIRIEle;\n\n  if (elements.length !== undefined) {\n    var elementsLoaded = 0;\n    Array.prototype.forEach.call(elements, function (element) {\n      injectElement(element, evalScripts, pngFallback, renumerateIRIElements, function (svg) {\n        if (eachCallback && typeof eachCallback === 'function') eachCallback(svg);\n        if (done && elements.length === ++elementsLoaded) done(elementsLoaded);\n      });\n    });\n  } else {\n    if (elements) {\n      injectElement(elements, evalScripts, pngFallback, renumerateIRIElements, function (svg) {\n        if (eachCallback && typeof eachCallback === 'function') eachCallback(svg);\n        if (done) done(1);\n        elements = null;\n      });\n    } else {\n      if (done) done(0);\n    }\n  }\n};\n\nexport default SVGInjector;"],"names":["_extends","module","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","excluded","sourceKeys","keys","indexOf","subClass","superClass","create","constructor","__proto__","cloneSvg","sourceSvg","cloneNode","svgCache","requestQueue","queueRequest","url","callback","push","loadSvg","isLocal","window","location","protocol","undefined","SVGSVGElement","XMLHttpRequest","httpRequest","onreadystatechange","readyState","status","responseXML","statusText","Document","documentElement","DOMParser","Function","xmlDoc","parseFromString","responseText","e","getElementsByTagName","len","index","setTimeout","processRequestQueue","open","overrideMimeType","send","xlinkNamespace","injectedElements","ranScripts","injectCount","injectElement","el","evalScripts","pngFallback","renumerateIRIElements","hasSvgSupport","document","implementation","hasFeature","imgUrl","getAttribute","test","setAttribute","svg","imgId","imgTitle","classMerge","concat","join","list","hash","split","out","unshift","uniqueClasses","imgStyle","imgData","filter","attributes","at","name","Array","forEach","dataAttr","value","element","elementDefs","properties","currentId","newId","iriElementsAndProperties","clipPath","color-profile","cursor","linearGradient","marker","mask","pattern","radialGradient","elementsLen","querySelectorAll","referencingElements","id","property","j","referencingElementLen","allLinks","links","k","allLinksLen","getAttributeNS","toString","l","linksLen","setAttributeNS","removeAttribute","script","scriptType","scripts","scriptsToEval","scriptsLen","innerText","textContent","removeChild","scriptsToEvalLen","styleTags","styleTag","parentNode","replaceChild","perElementFallback","pop","replace","ReactSVG","container","refCallback","renderSVG","Node","props","each","onInjected","src","svgClassName","svgStyle","div","createElement","innerHTML","ReactDOMServer","renderToStaticMarkup","React.createElement","className","style","elements","_temp","done","_ref","_ref$evalScripts","_ref$pngFallback","eachCallback","_ref$renumerateIRIEle","elementsLoaded","SVGInjector","appendChild","firstChild","removeSVG","componentDidMount","componentDidUpdate","componentWillUnmount","render","rest","ref","React","defaultProps"],"mappings":"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"}