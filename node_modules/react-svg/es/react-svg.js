import _extends from '@babel/runtime/helpers/extends';
import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/objectWithoutPropertiesLoose';
import _inheritsLoose from '@babel/runtime/helpers/inheritsLoose';
import SVGInjector from '@tanem/svg-injector';
import { oneOf, func, bool, string, object } from 'prop-types';
import { createElement, Component } from 'react';
import ReactDOMServer from 'react-dom/server';

var ReactSVG =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(ReactSVG, _React$Component);

  function ReactSVG() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.container = void 0;

    _this.refCallback = function (container) {
      _this.container = container;
    };

    return _this;
  }

  var _proto = ReactSVG.prototype;

  _proto.renderSVG = function renderSVG() {
    if (this.container instanceof Node) {
      var _this$props = this.props,
          _evalScripts = _this$props.evalScripts,
          each = _this$props.onInjected,
          _renumerateIRIElements = _this$props.renumerateIRIElements,
          _src = _this$props.src,
          _svgClassName = _this$props.svgClassName,
          _svgStyle = _this$props.svgStyle;
      var div = document.createElement('div');
      div.innerHTML = ReactDOMServer.renderToStaticMarkup(createElement("div", null, createElement("div", {
        className: _svgClassName,
        "data-src": _src,
        style: _svgStyle
      })));
      var wrapper = this.container.appendChild(div.firstChild);
      SVGInjector(wrapper.firstChild, {
        each: each,
        evalScripts: _evalScripts,
        renumerateIRIElements: _renumerateIRIElements
      });
    }
  };

  _proto.removeSVG = function removeSVG() {
    if (this.container instanceof Node && this.container.firstChild instanceof Node) {
      this.container.removeChild(this.container.firstChild);
    }
  };

  _proto.componentDidMount = function componentDidMount() {
    this.renderSVG();
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    this.removeSVG();
    this.renderSVG();
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.removeSVG();
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        evalScripts = _this$props2.evalScripts,
        onInjected = _this$props2.onInjected,
        renumerateIRIElements = _this$props2.renumerateIRIElements,
        src = _this$props2.src,
        svgClassName = _this$props2.svgClassName,
        svgStyle = _this$props2.svgStyle,
        rest = _objectWithoutPropertiesLoose(_this$props2, ["evalScripts", "onInjected", "renumerateIRIElements", "src", "svgClassName", "svgStyle"]);

    return createElement("div", _extends({}, rest, {
      ref: this.refCallback
    }));
  };

  return ReactSVG;
}(Component);

ReactSVG.defaultProps = {
  evalScripts: 'never',
  onInjected: function onInjected() {
    return undefined;
  },
  renumerateIRIElements: true,
  svgClassName: null,
  svgStyle: {}
};
ReactSVG.propTypes = process.env.NODE_ENV !== "production" ? {
  evalScripts: oneOf(['always', 'once', 'never']),
  onInjected: func,
  renumerateIRIElements: bool,
  src: string.isRequired,
  svgClassName: string,
  svgStyle: object
} : {};

export default ReactSVG;
//# sourceMappingURL=react-svg.js.map
